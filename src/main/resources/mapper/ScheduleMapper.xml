<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kcc.springmini.domain.schedule.repository.mapper.ScheduleMapper">
    <insert id="save" parameterType="ScheduleVO">
        insert into MeetUpSchedule(schedule_id, meet_up_id, member_id, title, content, location, person, deadline, appointment_time, created_at, dead_status)
        values(SEQ_MEETUPSCHEDULE.nextval, #{meetUpId}, #{memberId}, #{scheduleTitle}, #{scheduleDescription},
               #{location}, #{participantLimit},
               TO_TIMESTAMP(#{deadline}, 'YYYY-MM-DD HH24:MI:SS'),
               TO_TIMESTAMP(#{scheduleTime}, 'YYYY-MM-DD HH24:MI:SS'), systimestamp, 'T')
    </insert>

    <!-- 모임 일정 맴버 생성 (참가하기) -->
    <!-- 선착순 참가를 위한 비관 LOCK -->
    <select id="lockScheduleMember" parameterType="long" resultType="int">
        SELECT CASE
                   WHEN person > (SELECT COUNT(*) FROM SCHEDULEBELONGMEMBER WHERE schedule_id = #{scheduleId})
                       THEN 1
                   ELSE 0
                   END
        FROM MeetUpSchedule
        WHERE schedule_id = #{scheduleId}
            FOR UPDATE
    </select>

    <!-- 모임 일정 참가인원 삽입 -->
    <insert id="saveMember" parameterType="map">
        insert into SCHEDULEBELONGMEMBER(meet_up_id, member_id, schedule_id)
        values(#{meetUpId}, #{memberId}, #{scheduleId})
    </insert>

    <delete id="delete" parameterType="long">
        delete from MeetUpSchedule where schedule_id = #{id}
    </delete>

    <select id="findById" parameterType="long" resultType="ScheduleResponseDto">
        select ms.title, ms.content, ms.appointment_time, ms.person, ms.deadline, m.nickname as leader,
               (select count(*) from SCHEDULEBELONGMEMBER sbm where sbm.schedule_id = ms.schedule_id) as accept_count
        from MeetUpSchedule ms
        inner join Member m on ms.member_id = m.member_id
        where ms.schedule_id = #{id}
    </select>

    <select id="findAll" parameterType="map" resultType="ScheduleListResponseDto">
        <![CDATA[
        select inline_ms.title, inline_ms.content, inline_ms.person,
               inline_ms.deadline, inline_ms.appointment_time, inline_ms.schedule_id
        from
            (
                select ms.title, ms.content, ms.person,
                       ms.deadline, ms.appointment_time, schedule_id, ROWNUM rnum
                from (
                    select /*+INDEX_DESC(meetupschedule PK_MeetUpSchedule) */
                        *
                    from MeetUpSchedule ms
                    where ms.meet_up_id = #{meetUpId}
                    AND ms.dead_status = 'T'
                    order by ms.schedule_id desc
                ) ms
                where ROWNUM <= #{limit} + #{offset}
            ) inline_ms
        where rnum > #{offset}
        ]]>
    </select>

    <select id="count" parameterType="long" resultType="long">
        select count(*)
        from MeetUpSchedule
        where meet_up_id = #{meetUpId}
        AND deadline >= systimestamp
    </select>

    <update id="checkDeadline">
        <![CDATA[
        update MeetUpSchedule
        set dead_status = 'F'
        where deadline <= systimestamp
        ]]>
    </update>
</mapper>
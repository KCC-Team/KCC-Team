<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kcc.springmini.domain.schedule.mapper.ScheduleMapper">
    <insert id="save" parameterType="ScheduleVO">
        <selectKey keyProperty="scheduleId" resultType="long" order="BEFORE">
            SELECT SEQ_MEETUPSCHEDULE.nextval FROM DUAL
        </selectKey>
        insert into MeetUpSchedule(schedule_id, meet_up_id, member_id, title, content, location, person, deadline, appointment_time, created_at, dead_status)
        values(#{scheduleId}, #{meetUpId}, #{memberId}, #{scheduleTitle}, #{scheduleDescription},
               #{location}, #{participantLimit},
               TO_TIMESTAMP(#{deadline}, 'YYYY-MM-DD HH24:MI:SS'),
               TO_TIMESTAMP(#{scheduleDateTime}, 'YYYY-MM-DD HH24:MI:SS'), systimestamp, 'T')
    </insert>

    <!-- 모임 일정 맴버 생성 (참가하기) -->
    <!-- 선착순 참가를 위한 비관 LOCK -->
    <select id="lockScheduleMember" parameterType="long" resultType="int">
        SELECT CASE
                   WHEN person > (SELECT COUNT(*) FROM SCHEDULEBELONGMEMBER WHERE schedule_id = #{scheduleId})
                       THEN 1
                   ELSE 0
                   END
        FROM MeetUpSchedule
        WHERE schedule_id = #{scheduleId}
            FOR UPDATE
    </select>

    <select id="isParticipated" parameterType="map" resultType="int">
        select count(*)
        from SCHEDULEBELONGMEMBER
        where schedule_id = #{scheduleId}
        and member_id = #{memberId}
    </select>

    <!-- 모임 일정 참가인원 삽입 -->
    <insert id="saveMember" parameterType="map">
        insert into SCHEDULEBELONGMEMBER(meet_up_id, member_id, schedule_id)
        values(#{meetUpId}, #{memberId}, #{scheduleId})
    </insert>

    <delete id="delete" parameterType="map">
        delete from MeetUpSchedule where schedule_id = #{id} and member_id = #{memberId}
    </delete>

    <update id="update" parameterType="map">
        update MeetUpSchedule
        set title = #{scheduleVO.scheduleTitle},
            content = #{scheduleVO.scheduleDescription},
            person = #{scheduleVO.participantLimit},
            deadline = TO_TIMESTAMP(#{scheduleVO.deadline}, 'YYYY-MM-DD HH24:MI:SS'),
            appointment_time = TO_TIMESTAMP(#{scheduleVO.scheduleDateTime}, 'YYYY-MM-DD HH24:MI:SS')
        where schedule_id = #{id}
    </update>

    <select id="findById" parameterType="long" resultType="ScheduleResponseDto">
        select ms.title, ms.content, ms.appointment_time, ms.person, ms.deadline, m.nickname as leader, ms.SCHEDULE_ID as scheduleId,  ms.MEMBER_ID as memberId,
               (select count(*) from SCHEDULEBELONGMEMBER sbm where sbm.schedule_id = ms.schedule_id) as accept_count
        from MeetUpSchedule ms
        inner join Member m on ms.member_id = m.member_id
        where ms.schedule_id = #{id}
    </select>

    <select id="findAll" parameterType="map" resultType="ScheduleListResponseDto">
        SELECT ms.title, ms.content, ms.person, ms.deadline, ms.appointment_time, ms.schedule_id
        FROM (
        SELECT title, content, person, deadline, appointment_time, schedule_id, ROWNUM rnum
        FROM (
        SELECT /*+ INDEX_DESC(meetupschedule PK_MeetUpSchedule) */
        title, content, person, deadline, appointment_time, schedule_id
        FROM MeetUpSchedule
        WHERE meet_up_id = #{meetUpId}
        AND dead_status = 'T'
        <if test="keyword != null and keyword != ''">
            <![CDATA[
                AND (
                    title LIKE '%' || #{keyword} || '%' OR
                    content LIKE '%' || #{keyword} || '%'
                )
                ]]>
        </if>
        <choose>
            <when test="type == 'deadline'">
                <![CDATA[ ORDER BY deadline, schedule_id DESC ]]>
            </when>
            <when test="type == 'latest'">
                <![CDATA[ ORDER BY created_at DESC, schedule_id DESC ]]>
            </when>
            <otherwise>
                <![CDATA[ ORDER BY schedule_id DESC ]]>
            </otherwise>
        </choose>
        )
        <![CDATA[
        WHERE ROWNUM <= #{limit} + #{offset}
        ) ms
        WHERE ms.rnum > #{offset}
        ]]>
    </select>

    <select id="count" parameterType="long" resultType="long">
        select count(*)
        from MeetUpSchedule
        where meet_up_id = #{meetUpId}
        AND deadline >= systimestamp
    </select>

    <update id="checkDeadline">
        <![CDATA[
        update MeetUpSchedule
        set dead_status = 'F'
        where deadline <= systimestamp
        ]]>
    </update>
</mapper>